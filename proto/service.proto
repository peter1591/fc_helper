syntax = "proto3";

package wiring;

// Next ID: 8
message Building {
  string name = 7;

  double current_amount = 1;

  double target_amount = 2;
  double elapsed_time = 3;

  message Income {
    // amount * unit is the final income of this building
    double amount = 1;
    double unit = 2;

    double interval = 3;

    double other_income_per_sec = 4;
  }
  Income income = 4;

  message UpgradeAmount {
    double cost = 1;
    double income_increase = 2;

    double next_cost_multipler = 3;

    // E.g., upgrade building so we can upgrade
    double onetime_cost = 4;

    message MultiplyAmount {
      // How many upgrades til amount is multipled
      // 0 means next upgrade will multiply
      // valid: 0~9
      int32 upgrades = 1;

      double multiply = 2;
    }
    MultiplyAmount multiply = 5;

    int32 availables = 6;
  }
  UpgradeAmount upgrade_amount = 5;

  message UpgradeTime {
    double cost = 1;
    double income_shorten = 2;

    double next_cost_multipler = 3;

    int32 availables = 4;
  }
  UpgradeTime upgrade_time = 6;
}

message State { repeated Building buildings = 1; }

message Objective { string building_name = 1; }

// Next ID: 5
message RunRequest {
  State state = 1;
  Objective objective = 4;
  int32 rand_seed = 2;
  int32 iteration_report_interval = 3;
}

message RunResponse {
  message BestStrategy {
    enum Action {
      ACTION_UNSET = 0;
      UPGRADE_AMOUNT = 1;
      UPGRADE_TIME = 2;
      END = 3;
    }
    repeated Action actions = 1;

    Building building = 2;
  }

  message ProgressInfo {
    int32 iteration = 1;

    int32 new_node_count = 2;
    int32 new_node_count_max = 3;
  }

  oneof response {
    BestStrategy best_strategy = 1;
    ProgressInfo progress_info = 2;
  }
}

message SaveRequest {
  string name = 1;
  RunRequest request = 2;
}
message SaveResponse {}

message LoadRequest { string name = 1; }
message LoadResponse { RunRequest request = 1; }

message ListRequest {}
message ListResponse { repeated string name = 1; }

message Database {
  message SavedRequest {
    string name = 1;
    RunRequest request = 2;
  }
  repeated SavedRequest saved_requests = 1;
}

service AIService {
  rpc run(RunRequest) returns (stream RunResponse) {}

  rpc save(SaveRequest) returns (SaveResponse) {}

  rpc load(LoadRequest) returns (LoadResponse) {}

  rpc list(ListRequest) returns (ListResponse) {}
}
